{"id": "stmt_001", "level": 2, "strategy": "statement", "originalCode": "function processData(data) {\n  let result = [];\n  for (let i = 0; i < data.length; i++) {\n    const item = data[i];\n    if (item > 0) {\n      result.push(item * 2);\n    }\n  }\n  return result;\n}", "maskedCode": "function processData(data) {\n  <MASK_2_1>\n  for (let i = 0; i < data.length; i++) {\n    <MASK_2_2>\n    if (item > 0) {\n      <MASK_2_3>\n    }\n  }\n  return result;\n}", "maskMap": {"<MASK_2_1>": {"type": "statement", "statementType": "variable_declaration", "original": "let result = [];"}, "<MASK_2_2>": {"type": "statement", "statementType": "variable_declaration", "original": "const item = data[i];"}, "<MASK_2_3>": {"type": "statement", "statementType": "expression", "original": "result.push(item * 2);"}}, "abapCode": "FORM processdata USING pt_data TYPE STANDARD TABLE CHANGING pt_result TYPE STANDARD TABLE.\n  DATA: lv_index TYPE i,\n        ls_item TYPE i,\n        lv_doubled TYPE i.\n  \n  CLEAR pt_result.\n  \n  LOOP AT pt_data INTO ls_item.\n    lv_index = sy-tabix.\n    IF ls_item GT 0.\n      lv_doubled = ls_item * 2.\n      APPEND lv_doubled TO pt_result.\n    ENDIF.\n  ENDLOOP.\nENDFORM.", "difficulty": "intermediate"}
{"id": "stmt_002", "level": 2, "strategy": "statement", "originalCode": "function validateUser(user) {\n  if (!user.name) {\n    throw new Error('Name is required');\n  }\n  if (!user.email.includes('@')) {\n    throw new Error('Invalid email');\n  }\n  if (user.age < 0 || user.age > 120) {\n    throw new Error('Invalid age');\n  }\n  return true;\n}", "maskedCode": "function validateUser(user) {\n  if (!user.name) {\n    <MASK_2_4>\n  }\n  if (!user.email.includes('@')) {\n    <MASK_2_5>\n  }\n  if (user.age < 0 || user.age > 120) {\n    <MASK_2_6>\n  }\n  return true;\n}", "maskMap": {"<MASK_2_4>": {"type": "statement", "statementType": "expression", "original": "throw new Error('Name is required');"}, "<MASK_2_5>": {"type": "statement", "statementType": "expression", "original": "throw new Error('Invalid email');"}, "<MASK_2_6>": {"type": "statement", "statementType": "expression", "original": "throw new Error('Invalid age');"}}, "abapCode": "FORM validateuser USING ps_user TYPE REF TO object CHANGING pv_valid TYPE abap_bool.\n  DATA: lv_name TYPE string,\n        lv_email TYPE string,\n        lv_age TYPE i.\n  \n  \" Get user fields (simplified)\n  lv_name = ps_user->name.\n  lv_email = ps_user->email.\n  lv_age = ps_user->age.\n  \n  IF lv_name IS INITIAL.\n    MESSAGE 'Name is required' TYPE 'E'.\n    pv_valid = abap_false.\n    EXIT.\n  ENDIF.\n  \n  IF lv_email NS '@'.\n    MESSAGE 'Invalid email' TYPE 'E'.\n    pv_valid = abap_false.\n    EXIT.\n  ENDIF.\n  \n  IF lv_age LT 0 OR lv_age GT 120.\n    MESSAGE 'Invalid age' TYPE 'E'.\n    pv_valid = abap_false.\n    EXIT.\n  ENDIF.\n  \n  pv_valid = abap_true.\nENDFORM.", "difficulty": "advanced"}
{"id": "stmt_003", "level": 2, "strategy": "statement", "originalCode": "function calculateStats(numbers) {\n  let sum = 0;\n  let count = numbers.length;\n  for (const num of numbers) {\n    sum += num;\n  }\n  let average = sum / count;\n  let max = Math.max(...numbers);\n  let min = Math.min(...numbers);\n  return { sum, average, max, min, count };\n}", "maskedCode": "function calculateStats(numbers) {\n  <MASK_2_7>\n  <MASK_2_8>\n  for (const num of numbers) {\n    <MASK_2_9>\n  }\n  <MASK_2_10>\n  <MASK_2_11>\n  <MASK_2_12>\n  return { sum, average, max, min, count };\n}", "maskMap": {"<MASK_2_7>": {"type": "statement", "statementType": "variable_declaration", "original": "let sum = 0;"}, "<MASK_2_8>": {"type": "statement", "statementType": "variable_declaration", "original": "let count = numbers.length;"}, "<MASK_2_9>": {"type": "statement", "statementType": "assignment", "original": "sum += num;"}, "<MASK_2_10>": {"type": "statement", "statementType": "variable_declaration", "original": "let average = sum / count;"}, "<MASK_2_11>": {"type": "statement", "statementType": "variable_declaration", "original": "let max = Math.max(...numbers);"}, "<MASK_2_12>": {"type": "statement", "statementType": "variable_declaration", "original": "let min = Math.min(...numbers);"}}, "abapCode": "FORM calculatestats USING pt_numbers TYPE STANDARD TABLE \n                   CHANGING ps_stats TYPE REF TO object.\n  DATA: lv_sum TYPE i,\n        lv_count TYPE i,\n        lv_num TYPE i,\n        lv_average TYPE f,\n        lv_max TYPE i,\n        lv_min TYPE i,\n        lv_first TYPE abap_bool VALUE abap_true.\n  \n  lv_count = lines( pt_numbers ).\n  \n  LOOP AT pt_numbers INTO lv_num.\n    lv_sum = lv_sum + lv_num.\n    \n    IF lv_first = abap_true.\n      lv_max = lv_num.\n      lv_min = lv_num.\n      lv_first = abap_false.\n    ELSE.\n      IF lv_num GT lv_max.\n        lv_max = lv_num.\n      ENDIF.\n      IF lv_num LT lv_min.\n        lv_min = lv_num.\n      ENDIF.\n    ENDIF.\n  ENDLOOP.\n  \n  IF lv_count GT 0.\n    lv_average = lv_sum / lv_count.\n  ENDIF.\n  \n  \" Return stats structure (simplified)\n  \" ps_stats->sum = lv_sum.\n  \" ps_stats->average = lv_average.\n  \" ps_stats->max = lv_max.\n  \" ps_stats->min = lv_min.\n  \" ps_stats->count = lv_count.\nENDFORM.", "difficulty": "intermediate"}
{"id": "stmt_004", "level": 2, "strategy": "statement", "originalCode": "async function fetchUserData(userId) {\n  try {\n    const response = await fetch(`/api/users/${userId}`);\n    const userData = await response.json();\n    console.log('User data fetched successfully');\n    return userData;\n  } catch (error) {\n    console.error('Failed to fetch user data:', error);\n    throw error;\n  }\n}", "maskedCode": "async function fetchUserData(userId) {\n  try {\n    <MASK_2_13>\n    <MASK_2_14>\n    <MASK_2_15>\n    return userData;\n  } catch (error) {\n    <MASK_2_16>\n    throw error;\n  }\n}", "maskMap": {"<MASK_2_13>": {"type": "statement", "statementType": "variable_declaration", "original": "const response = await fetch(`/api/users/${userId}`);"}, "<MASK_2_14>": {"type": "statement", "statementType": "variable_declaration", "original": "const userData = await response.json();"}, "<MASK_2_15>": {"type": "statement", "statementType": "function_call", "original": "console.log('User data fetched successfully');"}, "<MASK_2_16>": {"type": "statement", "statementType": "function_call", "original": "console.error('Failed to fetch user data:', error);"}}, "abapCode": "FORM fetchuserdata USING pv_userid TYPE string \n                  CHANGING ps_userdata TYPE REF TO object\n                          pv_success TYPE abap_bool.\n  DATA: lv_url TYPE string,\n        lv_response TYPE string,\n        lo_http_client TYPE REF TO if_http_client.\n  \n  TRY.\n    \" Build URL\n    CONCATENATE '/api/users/' pv_userid INTO lv_url.\n    \n    \" Create HTTP client (simplified)\n    cl_http_client=>create_by_url(\n      EXPORTING url = lv_url\n      IMPORTING client = lo_http_client\n    ).\n    \n    \" Send request\n    lo_http_client->send( ).\n    \n    \" Get response\n    lo_http_client->receive( ).\n    lv_response = lo_http_client->response->get_cdata( ).\n    \n    \" Log success\n    WRITE 'User data fetched successfully'.\n    \n    \" Parse JSON response (simplified)\n    \" ps_userdata = parse_json( lv_response ).\n    pv_success = abap_true.\n    \n  CATCH cx_http_communication_failure INTO DATA(lx_error).\n    WRITE: 'Failed to fetch user data:', lx_error->get_text( ).\n    pv_success = abap_false.\n    RAISE EXCEPTION lx_error.\n  ENDTRY.\nENDFORM.", "difficulty": "advanced"}
{"id": "stmt_005", "level": 2, "strategy": "statement", "originalCode": "function sortUsers(users, sortBy) {\n  const sortedUsers = [...users];\n  sortedUsers.sort((a, b) => {\n    if (sortBy === 'name') {\n      return a.name.localeCompare(b.name);\n    } else if (sortBy === 'age') {\n      return a.age - b.age;\n    } else if (sortBy === 'email') {\n      return a.email.localeCompare(b.email);\n    }\n    return 0;\n  });\n  return sortedUsers;\n}", "maskedCode": "function sortUsers(users, sortBy) {\n  <MASK_2_17>\n  sortedUsers.sort((a, b) => {\n    if (sortBy === 'name') {\n      <MASK_2_18>\n    } else if (sortBy === 'age') {\n      <MASK_2_19>\n    } else if (sortBy === 'email') {\n      <MASK_2_20>\n    }\n    return 0;\n  });\n  return sortedUsers;\n}", "maskMap": {"<MASK_2_17>": {"type": "statement", "statementType": "variable_declaration", "original": "const sortedUsers = [...users];"}, "<MASK_2_18>": {"type": "statement", "statementType": "expression", "original": "return a.name.localeCompare(b.name);"}, "<MASK_2_19>": {"type": "statement", "statementType": "expression", "original": "return a.age - b.age;"}, "<MASK_2_20>": {"type": "statement", "statementType": "expression", "original": "return a.email.localeCompare(b.email);"}}, "abapCode": "FORM sortusers USING pt_users TYPE STANDARD TABLE\n                    pv_sortby TYPE string\n              CHANGING pt_sorted TYPE STANDARD TABLE.\n  \n  TYPES: BEGIN OF ty_user,\n           name TYPE string,\n           age TYPE i,\n           email TYPE string,\n         END OF ty_user.\n  \n  DATA: lt_temp_users TYPE TABLE OF ty_user,\n        ls_user TYPE ty_user.\n  \n  \" Copy users to temp table\n  LOOP AT pt_users INTO ls_user.\n    APPEND ls_user TO lt_temp_users.\n  ENDLOOP.\n  \n  \" Sort based on criteria\n  CASE pv_sortby.\n    WHEN 'name'.\n      SORT lt_temp_users BY name ASCENDING.\n    WHEN 'age'.\n      SORT lt_temp_users BY age ASCENDING.\n    WHEN 'email'.\n      SORT lt_temp_users BY email ASCENDING.\n  ENDCASE.\n  \n  \" Return sorted users\n  CLEAR pt_sorted.\n  LOOP AT lt_temp_users INTO ls_user.\n    APPEND ls_user TO pt_sorted.\n  ENDLOOP.\nENDFORM.", "difficulty": "intermediate"}