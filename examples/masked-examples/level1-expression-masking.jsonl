{"id": "expr_001", "level": 1, "strategy": "expression", "originalCode": "function calculateArea(length, width) {\n  const area = length * width;\n  return area;\n}", "maskedCode": "function calculateArea(<MASK_1_1>, <MASK_1_2>) {\n  const <MASK_1_3> = <MASK_1_4> * <MASK_1_5>;\n  return <MASK_1_6>;\n}", "maskMap": {"<MASK_1_1>": {"type": "identifier", "original": "length"}, "<MASK_1_2>": {"type": "identifier", "original": "width"}, "<MASK_1_3>": {"type": "identifier", "original": "area"}, "<MASK_1_4>": {"type": "identifier", "original": "length"}, "<MASK_1_5>": {"type": "identifier", "original": "width"}, "<MASK_1_6>": {"type": "identifier", "original": "area"}}, "abapCode": "FORM calculatearea USING p_length TYPE string p_width TYPE string CHANGING p_result TYPE string.\n  DATA lv_area TYPE string.\n  lv_area = p_length * p_width.\n  p_result = lv_area.\nENDFORM.", "difficulty": "beginner"}
{"id": "expr_002", "level": 1, "strategy": "expression", "originalCode": "const message = 'Hello, World!';\nconsole.log(message);", "maskedCode": "const <MASK_1_7> = <MASK_1_8>;\nconsole.log(<MASK_1_9>);", "maskMap": {"<MASK_1_7>": {"type": "identifier", "original": "message"}, "<MASK_1_8>": {"type": "string_literal", "original": "'Hello, World!'"}, "<MASK_1_9>": {"type": "identifier", "original": "message"}}, "abapCode": "DATA lv_message TYPE string VALUE 'Hello, World!'.\nWRITE lv_message.", "difficulty": "beginner"}
{"id": "expr_003", "level": 1, "strategy": "expression", "originalCode": "function checkAge(age) {\n  if (age >= 18) {\n    return true;\n  }\n  return false;\n}", "maskedCode": "function checkAge(<MASK_1_10>) {\n  if (<MASK_1_11> >= <MASK_1_12>) {\n    return <MASK_1_13>;\n  }\n  return <MASK_1_14>;\n}", "maskMap": {"<MASK_1_10>": {"type": "identifier", "original": "age"}, "<MASK_1_11>": {"type": "identifier", "original": "age"}, "<MASK_1_12>": {"type": "numeric_literal", "original": "18"}, "<MASK_1_13>": {"type": "boolean_literal", "original": "true"}, "<MASK_1_14>": {"type": "boolean_literal", "original": "false"}}, "abapCode": "FORM checkage USING p_age TYPE i CHANGING p_result TYPE abap_bool.\n  IF p_age GE 18.\n    p_result = abap_true.\n    EXIT.\n  ENDIF.\n  p_result = abap_false.\nENDFORM.", "difficulty": "beginner"}
{"id": "expr_004", "level": 1, "strategy": "expression", "originalCode": "const numbers = [1, 2, 3, 4, 5];\nconst sum = numbers.reduce((a, b) => a + b, 0);", "maskedCode": "const <MASK_1_15> = [<MASK_1_16>, <MASK_1_17>, <MASK_1_18>, <MASK_1_19>, <MASK_1_20>];\nconst <MASK_1_21> = <MASK_1_22>.reduce((<MASK_1_23>, <MASK_1_24>) => <MASK_1_25> + <MASK_1_26>, <MASK_1_27>);", "maskMap": {"<MASK_1_15>": {"type": "identifier", "original": "numbers"}, "<MASK_1_16>": {"type": "numeric_literal", "original": "1"}, "<MASK_1_17>": {"type": "numeric_literal", "original": "2"}, "<MASK_1_18>": {"type": "numeric_literal", "original": "3"}, "<MASK_1_19>": {"type": "numeric_literal", "original": "4"}, "<MASK_1_20>": {"type": "numeric_literal", "original": "5"}, "<MASK_1_21>": {"type": "identifier", "original": "sum"}, "<MASK_1_22>": {"type": "identifier", "original": "numbers"}, "<MASK_1_23>": {"type": "identifier", "original": "a"}, "<MASK_1_24>": {"type": "identifier", "original": "b"}, "<MASK_1_25>": {"type": "identifier", "original": "a"}, "<MASK_1_26>": {"type": "identifier", "original": "b"}, "<MASK_1_27>": {"type": "numeric_literal", "original": "0"}}, "abapCode": "DATA: BEGIN OF ls_numbers,\n        value TYPE i,\n      END OF ls_numbers,\n      lt_numbers LIKE TABLE OF ls_numbers,\n      lv_sum TYPE i.\n\nls_numbers-value = 1. APPEND ls_numbers TO lt_numbers.\nls_numbers-value = 2. APPEND ls_numbers TO lt_numbers.\nls_numbers-value = 3. APPEND ls_numbers TO lt_numbers.\nls_numbers-value = 4. APPEND ls_numbers TO lt_numbers.\nls_numbers-value = 5. APPEND ls_numbers TO lt_numbers.\n\nLOOP AT lt_numbers INTO ls_numbers.\n  lv_sum = lv_sum + ls_numbers-value.\nENDLOOP.", "difficulty": "intermediate"}
{"id": "expr_005", "level": 1, "strategy": "expression", "originalCode": "function greetUser(name, title = 'Mr.') {\n  return `${title} ${name}, welcome!`;\n}", "maskedCode": "function greetUser(<MASK_1_28>, <MASK_1_29> = <MASK_1_30>) {\n  return `${<MASK_1_31>} ${<MASK_1_32>}, <MASK_1_33>!`;\n}", "maskMap": {"<MASK_1_28>": {"type": "identifier", "original": "name"}, "<MASK_1_29>": {"type": "identifier", "original": "title"}, "<MASK_1_30>": {"type": "string_literal", "original": "'Mr.'"}, "<MASK_1_31>": {"type": "identifier", "original": "title"}, "<MASK_1_32>": {"type": "identifier", "original": "name"}, "<MASK_1_33>": {"type": "string_literal", "original": "welcome"}}, "abapCode": "FORM greetuser USING p_name TYPE string p_title TYPE string CHANGING p_result TYPE string.\n  IF p_title IS INITIAL.\n    p_title = 'Mr.'.\n  ENDIF.\n  CONCATENATE p_title p_name ', welcome!' INTO p_result SEPARATED BY space.\nENDFORM.", "difficulty": "intermediate"}