{"id": "expr_001", "level": 1, "strategy": "expression", "originalCode": "function calculateArea(length, width) {\n  const area = length * width;\n  return area;\n}", "maskedCode": "function calculateArea(<MASK_1_1>, <MASK_1_2>) {\n  const <MASK_1_3> = <MASK_1_4> * <MASK_1_5>;\n  return <MASK_1_6>;\n}", "maskMap": {"<MASK_1_1>": {"type": "identifier", "original": "length"}, "<MASK_1_2>": {"type": "identifier", "original": "width"}, "<MASK_1_3>": {"type": "identifier", "original": "area"}, "<MASK_1_4>": {"type": "identifier", "original": "length"}, "<MASK_1_5>": {"type": "identifier", "original": "width"}, "<MASK_1_6>": {"type": "identifier", "original": "area"}}, "abapCode": "CLASS lcl_calculator DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS: calculate_area\n      IMPORTING\n        iv_length TYPE p DECIMALS 2\n        iv_width TYPE p DECIMALS 2\n      RETURNING\n        VALUE(rv_area) TYPE p DECIMALS 2.\nENDCLASS.\n\nCLASS lcl_calculator IMPLEMENTATION.\n  METHOD calculate_area.\n    rv_area = iv_length * iv_width.\n  ENDMETHOD.\nENDCLASS.", "difficulty": "beginner"}
{"id": "expr_002", "level": 1, "strategy": "expression", "originalCode": "const message = 'Hello, World!';\nconsole.log(message);", "maskedCode": "const <MASK_1_7> = <MASK_1_8>;\nconsole.log(<MASK_1_9>);", "maskMap": {"<MASK_1_7>": {"type": "identifier", "original": "message"}, "<MASK_1_8>": {"type": "string_literal", "original": "'Hello, World!'"}, "<MASK_1_9>": {"type": "identifier", "original": "message"}}, "abapCode": "START-OF-SELECTION.\n  DATA(lv_message) = 'Hello, World!'.\n  WRITE: / lv_message.", "difficulty": "beginner"}
{"id": "expr_003", "level": 1, "strategy": "expression", "originalCode": "function checkAge(age) {\n  if (age >= 18) {\n    return true;\n  }\n  return false;\n}", "maskedCode": "function checkAge(<MASK_1_10>) {\n  if (<MASK_1_11> >= <MASK_1_12>) {\n    return <MASK_1_13>;\n  }\n  return <MASK_1_14>;\n}", "maskMap": {"<MASK_1_10>": {"type": "identifier", "original": "age"}, "<MASK_1_11>": {"type": "identifier", "original": "age"}, "<MASK_1_12>": {"type": "numeric_literal", "original": "18"}, "<MASK_1_13>": {"type": "boolean_literal", "original": "true"}, "<MASK_1_14>": {"type": "boolean_literal", "original": "false"}}, "abapCode": "CLASS lcl_validation DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS: check_age\n      IMPORTING\n        iv_age TYPE i\n      RETURNING\n        VALUE(rv_is_adult) TYPE abap_bool.\nENDCLASS.\n\nCLASS lcl_validation IMPLEMENTATION.\n  METHOD check_age.\n    rv_is_adult = COND #( WHEN iv_age >= 18 THEN abap_true ELSE abap_false ).\n  ENDMETHOD.\nENDCLASS.", "difficulty": "beginner"}
{"id": "expr_004", "level": 1, "strategy": "expression", "originalCode": "const numbers = [1, 2, 3, 4, 5];\nconst sum = numbers.reduce((a, b) => a + b, 0);", "maskedCode": "const <MASK_1_15> = [<MASK_1_16>, <MASK_1_17>, <MASK_1_18>, <MASK_1_19>, <MASK_1_20>];\nconst <MASK_1_21> = <MASK_1_22>.reduce((<MASK_1_23>, <MASK_1_24>) => <MASK_1_25> + <MASK_1_26>, <MASK_1_27>);", "maskMap": {"<MASK_1_15>": {"type": "identifier", "original": "numbers"}, "<MASK_1_16>": {"type": "numeric_literal", "original": "1"}, "<MASK_1_17>": {"type": "numeric_literal", "original": "2"}, "<MASK_1_18>": {"type": "numeric_literal", "original": "3"}, "<MASK_1_19>": {"type": "numeric_literal", "original": "4"}, "<MASK_1_20>": {"type": "numeric_literal", "original": "5"}, "<MASK_1_21>": {"type": "identifier", "original": "sum"}, "<MASK_1_22>": {"type": "identifier", "original": "numbers"}, "<MASK_1_23>": {"type": "identifier", "original": "a"}, "<MASK_1_24>": {"type": "identifier", "original": "b"}, "<MASK_1_25>": {"type": "identifier", "original": "a"}, "<MASK_1_26>": {"type": "identifier", "original": "b"}, "<MASK_1_27>": {"type": "numeric_literal", "original": "0"}}, "abapCode": "START-OF-SELECTION.\n  DATA(lt_numbers) = VALUE int_table( ( 1 ) ( 2 ) ( 3 ) ( 4 ) ( 5 ) ).\n  \n  \" Modern ABAP equivalent to JavaScript reduce\n  DATA(lv_sum) = REDUCE i(\n    INIT sum = 0\n    FOR number IN lt_numbers\n    NEXT sum = sum + number\n  ).\n  \n  WRITE: / |Sum: { lv_sum }|.", "difficulty": "intermediate"}
{"id": "expr_005", "level": 1, "strategy": "expression", "originalCode": "function greetUser(name, title = 'Mr.') {\n  return `${title} ${name}, welcome!`;\n}", "maskedCode": "function greetUser(<MASK_1_28>, <MASK_1_29> = <MASK_1_30>) {\n  return `${<MASK_1_31>} ${<MASK_1_32>}, <MASK_1_33>!`;\n}", "maskMap": {"<MASK_1_28>": {"type": "identifier", "original": "name"}, "<MASK_1_29>": {"type": "identifier", "original": "title"}, "<MASK_1_30>": {"type": "string_literal", "original": "'Mr.'"}, "<MASK_1_31>": {"type": "identifier", "original": "title"}, "<MASK_1_32>": {"type": "identifier", "original": "name"}, "<MASK_1_33>": {"type": "string_literal", "original": "welcome"}}, "abapCode": "CLASS lcl_greeting DEFINITION.\n  PUBLIC SECTION.\n    CLASS-METHODS: greet_user\n      IMPORTING\n        iv_name TYPE string\n        iv_title TYPE string OPTIONAL\n      RETURNING\n        VALUE(rv_greeting) TYPE string.\nENDCLASS.\n\nCLASS lcl_greeting IMPLEMENTATION.\n  METHOD greet_user.\n    DATA(lv_title) = COND string( WHEN iv_title IS NOT INITIAL THEN iv_title ELSE 'Mr.' ).\n    rv_greeting = |{ lv_title } { iv_name }, welcome!|.\n  ENDMETHOD.\nENDCLASS.", "difficulty": "intermediate"}