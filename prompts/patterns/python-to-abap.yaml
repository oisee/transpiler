# Python to ABAP Pattern Mappings
# Specific patterns and idioms for Python â†’ ABAP translation

pattern_mappings:
  # Dictionary operations
  dict_operations:
    python: |
      data = {'name': 'John', 'age': 30}
      value = data.get('name', 'Unknown')
      data['city'] = 'Berlin'
    
    abap: |
      " Using VALUE expression for structure initialization
      DATA(ls_data) = VALUE struct(
        name = 'John'
        age = 30 ).
      
      " Dictionary get with default using COND
      DATA(lv_value) = COND string(
        WHEN ls_data-name IS NOT INITIAL
        THEN ls_data-name
        ELSE 'Unknown' ).
      
      " Adding new field (would need structure enhancement in real ABAP)
      ls_data = VALUE #( BASE ls_data city = 'Berlin' ).

  # List comprehensions
  list_comprehension:
    python: |
      squares = [x**2 for x in range(10) if x % 2 == 0]
    
    abap: |
      " Modern ABAP list comprehension equivalent
      DATA(lt_squares) = VALUE int_table(
        FOR i = 0 WHILE i < 10
        WHERE ( i MOD 2 = 0 )
        ( ipow( base = i exp = 2 ) ) ).

  # With statement (context managers)
  with_statement:
    python: |
      with open('file.txt', 'r') as f:
          content = f.read()
    
    abap: |
      CLASS lcl_file_handler DEFINITION.
        PUBLIC SECTION.
          CLASS-METHODS: read_file
            IMPORTING
              iv_filename TYPE string
            RETURNING
              VALUE(rv_content) TYPE string
            RAISING
              cx_sy_file_open_mode.
      ENDCLASS.
      
      CLASS lcl_file_handler IMPLEMENTATION.
        METHOD read_file.
          DATA: lv_file_table TYPE string_table,
                lv_rc TYPE i.
          
          TRY.
              " Use frontend services for file operations (client-side only)
              CALL METHOD cl_gui_frontend_services=>gui_upload
                EXPORTING
                  filename                = iv_filename
                  filetype                = 'ASC'
                  has_field_separator     = abap_false
                CHANGING
                  data_tab                = lv_file_table
                EXCEPTIONS
                  file_open_error         = 1
                  file_read_error         = 2
                  no_batch                = 3
                  gui_refuse_filetransfer = 4
                  invalid_type            = 5
                  no_authority            = 6
                  unknown_error           = 7
                  bad_data_format         = 8
                  header_not_allowed      = 9
                  separator_not_allowed   = 10
                  header_too_long         = 11
                  unknown_dp_error        = 12
                  access_denied           = 13
                  dp_out_of_memory        = 14
                  disk_full               = 15
                  dp_timeout              = 16.
              
              IF sy-subrc <> 0.
                RAISE EXCEPTION TYPE cx_sy_file_open_mode.
              ENDIF.
              
              " Concatenate table lines into single string
              LOOP AT lv_file_table INTO DATA(lv_line).
                IF rv_content IS INITIAL.
                  rv_content = lv_line.
                ELSE.
                  rv_content = |{ rv_content }{ cl_abap_char_utilities=>cr_lf }{ lv_line }|.
                ENDIF.
              ENDLOOP.
              
            CATCH cx_sy_file_open_mode INTO DATA(lo_error).
              RAISE EXCEPTION lo_error.
          ENDTRY.
        ENDMETHOD.
      ENDCLASS.

additional_instructions: |
  When translating Python to ABAP:
  1. Convert dynamic typing to static ABAP types
  2. Transform list comprehensions to VALUE expressions
  3. Map Python dicts to ABAP structures or hashed tables
  4. Convert generators to internal table processing
  5. Handle None as INITIAL in ABAP
  6. Use ABAP string templates for f-strings
  7. Convert decorators to method wrappers or aspects
  8. Map Python modules to ABAP includes or classes